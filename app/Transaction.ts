import {StateChannel} from "../interacts/StateChannel";
import * as abi from './abi.json';
import Web3 = require("web3");

class Transation {

  private stateChannel: StateChannel;
  private accountAddress: string;
  private web3: Web3;

  constructor(stateChannelContractAddress: string, web3: Web3, accountAddress: string) {
    this.stateChannel = new StateChannel(abi, stateChannelContractAddress)
    this.web3 = web3;
    this.accountAddress = accountAddress;

  }

  /**
   * This method creates and sign
   * @param nonce Integer representing number of transactions between parties.
   * @param recipientBalance Balance of recipient.
   */
  async create(nonce: string, recipientBalance: string): Promise<string> {

    const transactionHash = await this.stateChannel.methods.getTransactionHash(
      nonce,
      recipientBalance,
    );
    return this.web3.eth.sign(
      transactionHash,
      this.accountAddress,
    );

  }

  /**
   * This method verifies signature of a signer generated by signing a transaction.
   * @param nonce Integer representing number of transactions between parties.
   * @param recipientBalance Balance of recipient.
   * @param signature Ethereum signature generated by signing a transaction.
   * @param signer Address of signer.
   */
  async verify(
    nonce: string,
    recipientBalance: string,
    signature: string,
    signer: string,
  ): Promise<boolean> {

    const transactionHash = await this.stateChannel.methods.getTransactionHash(
      nonce,
      recipientBalance,
    );
    return this.web3.eth.accounts.recover(transactionHash, signature) === signer
  }

}